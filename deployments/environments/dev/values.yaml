# Default values for watcher.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

images:
  nginx:
    name: nginx
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
      limits:
        memory: 128Mi
        cpu: 1000m
  app:
    name: app
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
      limits:
        memory: 128Mi
        cpu: 1000m

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: ""
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-production"
  hosts:
    - host: watcher-dev.defihelper.info
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: watcher-tls
      hosts:
        - watcher-dev.defihelper.info

#broker:
#  maxReplicas: 10
#  maxReadyMessagesForHpa: 25
#  process:
#    labels:
#      app: app
#      component: broker
#      environment: dev
#      queue: process
#    queues:
#      queue:
#        name: queue
#        command: '"/bin/sh","-c","ln -s ./configuration/.env ./.env && npm run queue-consume -- -q scanner_tasks_default"'
#        replicas: 1
#        resources:
#          requests:
#            memory: 2048Mi
#            cpu: 1
#          limits:
#            memory: 4096Mi
#            cpu: 2
#      ethresolve:
#        name: ethresolve
#        command: '"/bin/sh","-c","ln -s ./configuration/.env ./.env && npm run events:resolve -- --network 1 --expiration 300000"'
#        replicas: 1
#        resources:
#          requests:
#            memory: 256Mi
#            cpu: 200m
#          limits:
#            memory: 512Mi
#            cpu: 500m
#      bscresolve:
#        name: bscresolve
#        command: '"/bin/sh","-c","ln -s ./configuration/.env ./.env && npm run events:resolve -- --network 56 --expiration 300000"'
#        replicas: 1
#        resources:
#          requests:
#            memory: 256Mi
#            cpu: 200m
#          limits:
#            memory: 512Mi
#            cpu: 500m
#      polygonresolve:
#        name: polygonresolve
#        command: '"/bin/sh","-c","ln -s  ./configuration/.env ./.env && npm run events:resolve -- --network 137 --expiration 300000"'
#        replicas: 1
#        resources:
#          requests:
#            memory: 256Mi
#            cpu: 200m
#          limits:
#            memory: 512Mi
#            cpu: 500m
#      moonriverresolve:
#        name: moonriverresolve
#        command: '"/bin/sh","-c","ln -s ./configuration/.env ./.env && npm run events:resolve -- --network 1285 --expiration 300000"'
#        replicas: 1
#        resources:
#          requests:
#            memory: 256Mi
#            cpu: 200m
#          limits:
#            memory: 512Mi
#            cpu: 500m
#      avaxresolve:
#        name: avaxresolve
#        command: '"/bin/sh","-c","ln -s ./configuration/.env ./.env && npm run events:resolve -- --network 43114 --expiration 300000"'
#        replicas: 1
#        resources:
#          requests:
#            memory: 256Mi
#            cpu: 200m
#          limits:
#            memory: 512Mi
#            cpu: 500m

#handlers:
#  labels:
#    app: watcher
#    component: cronHandler
#    environment: dev
#  resources:
#    requests:
#      memory: 128Mi
#      cpu: 200m
#    limits:
#      memory: 256Mi
#      cpu: 300m
#  schedules:
#    minute30:
#      command: '"/bin/sh","-c","ln -s ./configuration/.env ./.env && npm run queue:schedule -- --period minute30"'
#      schedule: "*/30 * * * *"
#    queue-deferred:
#      command: '"/bin/sh","-c","ln -s ./configuration/.env ./.env && npm run queue:deferred"'
#      schedule: "* * * * *"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: true
  annotations: {}
  name: ""
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
